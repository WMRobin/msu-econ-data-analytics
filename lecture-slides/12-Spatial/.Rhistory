gapminder
filter(gapminder, year == 1962) |>
ggplot(aes(fertility, life_expectancy)) +
geom_point()
filter(gapminder, year == 1962) |>
ggplot(aes(fertility, life_expectancy, color = continent)) +
geom_point()
filter(gapminder, year %in% c(1962, 2012)) |>
ggplot(aes(fertility, life_expectancy, col = continent)) +
geom_point() +
facet_grid(continent ~ year)  # "row ~ column"
years = c(1962, 1980, 1990, 2000, 2012)
continents = c("Europe", "Asia")
gapminder |>
filter(year %in% years & continent %in% continents) |>
ggplot( aes(fertility, life_expectancy, col = continent)) +
geom_point() +
facet_grid(. ~ year)
years = c(1962, 1980, 1990, 2000, 2012)
continents = c("Europe", "Asia")
gapminder |>
filter(year %in% years & continent %in% continents) |>
ggplot( aes(fertility, life_expectancy, col = continent)) +
geom_point() +
facet_wrap(~year)
years = c(1962, 1980, 1990, 2000, 2012)
continents = c("Europe", "Asia")
gapminder |>
filter(year %in% years & continent %in% continents) |>
ggplot( aes(fertility, life_expectancy, col = continent)) +
geom_point() +
facet_wrap(~year, scales = "free")
gapminder |>
filter(country == "United States") |>
ggplot(aes(year, fertility)) +
geom_point() +
geom_line()
countries = c("South Korea", "Germany")
gapminder |> filter(country %in% countries & !is.na(fertility)) |>
ggplot(aes(year, life_expectancy, color = country)) +
geom_line()
labels = data.frame(country = countries, x = c(1975, 1965), y = c(60, 72))
gapminder |>
filter(country %in% countries) |>
ggplot(aes(year, life_expectancy, col = country)) +
geom_line() +
geom_text(data = labels, aes(x, y, label = country), size = 5) +
theme(legend.position = "none")
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_bar() +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_column() +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_col() +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(country, GDP_percapita)) +
geom_col() +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_col() +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_col()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(country, GDP_percapita)) +
geom_col()
options(htmltools.dir.version = FALSE)
library(knitr)
knitr::opts_chunk$set(
fig.align = "center",
out.width="80%",
fig.height=4,
cache = TRUE,
dpi = 300,
warning = F,
message = F
)
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
ggplot(aes(country, GDP_percapita)) +
geom_bar()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
ggplot(aes(GDP_percapita, country)) +
geom_bar()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
ggplot(aes(GDP_percapita, country)) +
geom_col()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_point(size=2) +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_point(size=2)
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate() |>
ggplot(aes(GDP_percapita, country)) +
geom_point(size=2) +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year == 1970 & !is.na(GDP_percapita) & continent=="Asia") |>
mutate(country = reorder(country, GDP_percapita)) |>
ggplot(aes(GDP_percapita, country)) +
geom_point(size=2) +
scale_x_log10()
gapminder |> mutate(GDP_percapita = gdp/population) |>
filter(year %in% c(1970, 1980) & !is.na(GDP_percapita) & continent=="Asia") |>
mutate(country = reorder(country, GDP_percapita)) |>
ggplot(aes(GDP_percapita, country)) +
geom_line(aes(group = country)) +
geom_point(size=2, aes(color = factor(year))) +
scale_x_log10()
pw_linear = feols(log_price ~ longitude + i(longitude > -0.17, longitude + 0.17, FALSE), london_sample)
?i
library(tidyverse)
library(broom)
library(binsreg)
library(fixest)
# Piecewise linear
pw_linear = feols(log_price ~ longitude + i(longitude > -0.17, longitude + 0.17, FALSE), london_sample)
# Load London Airbnb data and take a 5% random sample
london = read_csv("https://osf.io/ey5p7/download")
london_sample = london |>
mutate(log_price = log(price)) |>
slice_sample(prop = 0.05)
pw_linear = feols(log_price ~ longitude + i(longitude > -0.17, longitude + 0.17, FALSE), london_sample)
tidy(pw_linear)
library(tidyverse)
library(dslabs)
data(murders)
ggplot(murders)
ggplot(murders) + geom_point(aes(x = population/10^6, y = total))
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point(siize = 2) +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
title("US Gun Murders in 2010")
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point(size = 2) +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
labs(title = "US Gun Murders in 2010")
p = murders |>
ggplot(aes(x = population/10^6, y = total)) +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
labs(title = "US Gun Murders in 2010")
p
p + geom_point(size = 3, color = "green")
p + geom_point(size = 3, color = "red")
p + geom_point(size = 3, color = "blue")
p + geom_point(aes(color = region), size = 3)
p + facet_wrap(region) +
geom_point(size = 3)
p + facet_wrap(aes(region)) +
geom_point(size = 3)
?facet_wrap
p + facet_wrap("region") +
geom_point(size = 3)
p + facet_wrap(~region) +
geom_point(size = 3)
p + facet_wrap(~region) +
geom_point(aes(color = region), size = 3)
p + facet_grid(~region) +
geom_point(aes(color = region), size = 3)
p + facet_grid(region~) +
p + facet_grid(region ~) +
?facet_grid
View(murders)
p + facet_wrap(~region) +
geom_point(aes(color = region), size = 3)
p + facet_wrap(~region, ncol = 1) +
geom_point(aes(color = region), size = 3)
p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3)
best = p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3)
p + facet_wrap(~region) +
geom_point(aes(color = region), size = 3)
p + facet_wrap(~region) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none")
p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none")
p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3)
p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none")
best = p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3)
best = p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none")
ggsave("output/murders_vs_population.pdf", best)
ggsave("output/murders_vs_population.pdf", best, height = 6, width = 4)
ggsave("output/murders_vs_population.pdf", best, height = 4, width = 6)
ggsave("output/murders_vs_population.jpg", best, height = 4, width = 6)
ggsave("output/murders_vs_population.png", best, height = 4, width = 6)
p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none") +
theme_gray()
p1 = p + facet_wrap(~region, nrow = 1) +
geom_point(aes(color = region), size = 3) +
theme(legend.position = "none")
p1 + theme_bw()
p1 + theme_minimal()
p1 + theme_classic()
p1 + theme_light()
p1 + theme_void()
p1 + theme_minimal()
p1 + theme_bw()
p1 + theme_light()
# Load data
london = read_csv("https://osf.io/ey5p7/download")
london_sample = london |>
mutate(log_price = log(price)) |>
slice_sample(prop = 0.05)
binsreg(london_sample$log_price, london_sample$longitude)
simple = feols(log_price ~ longitude, london_sample)
simple |> summary()
plot_fitted(simple)
# Define function to plot
plot_fitted = function(reg_object, df = london_sample) {
predicted = predict(reg_object, data = df, interval = "confidence")
fitted = df |> cbind(predicted)
graph = ggplot(fitted, aes(x = longitude)) + theme_light() +
geom_point(aes(y = log_price), alpha = 0.1) +
geom_ribbon(aes(ymin = ci_low, ymax = ci_high), fill = "coral") +
geom_line(aes(y = fit), size = 1, color = "orangered4")
return(graph)
}
simple = feols(log_price ~ longitude, london_sample)
simple |> summary()
plot_fitted(simple)
binned = feols(log_price ~ factor(ntile(longitude, 10)), london_sample)
tidy(binned)
plot_fitted(binned)
poly = feols(log_price ~ longitude + longitude^2, london_sample)
tidy(poly)
plot_fitted(poly)
poly = feols(log_price ~ longitude + longitude^2 + longitude^3, london_sample)
tidy(poly)
plot_fitted(poly)
poly = feols(log_price ~ longitude + longitude^2 + longitude^3 + longitude^4, london_sample)
tidy(poly)
plot_fitted(poly)
pw_linear = feols(log_price ~ longitude +
i(longitude > -0.17, longitude + 0.17, FALSE), london_sample)
tidy(pw_linear)
plot_fitted(pw_linear)
pw_cubic = feols(log_price ~ splines::bs(longitude, df = 10),
london_sample)
tidy(pw_cubic)
plot_fitted(pw_cubic)
library(tidyverse)
library(dslabs)
data(murders)
ggplot(murders)
ggplot(murders) +
geom_point(aes(x = population/10^6), y = total)
ggplot(murders) +
geom_point(aes(x = population/10^6), y = total))
ggplot(murders) +
geom_point(aes(x = population/10^6, y = total))
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point()
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
geom_smooth()
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log() +
scale_y_log()
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)")
ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
labs(title = "U.S. Gun Murders in 2010")
p = ggplot(murders, aes(x = population/10^6, y = total)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
labs(title = "U.S. Gun Murders in 2010")
p = ggplot(murders, aes(x = population/10^6, y = total)) +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total murders (log scale)") +
labs(title = "U.S. Gun Murders in 2010")
p
p + geom_point(size = 3, color = "blue")
p + geom_point(aes(color = region), size = 3)
p + geom_point(aes(color = region), size = 3) +
facet_wrap(~region)
p + geom_point(aes(color = region), size = 3) +
facet_wrap(~region, nrow = 1)
p + geom_point(aes(color = region), size = 3) +
facet_wrap(~region, nrow = 1) +
theme(legend.position = "none")
p1 = p + geom_point(aes(color = region), size = 3) +
facet_wrap(~region, nrow = 1) +
theme(legend.position = "none")
p1 + theme_bw()
p1 + theme_bw(legend.position = "none")
p1 + theme_bw() + theme(legend.position = "none")
p1 + theme_minimal() + theme(legend.position = "none")
best = p1 + theme_minimal() +
theme(legend.position = "none")
ggsave("output/murders_vs_population.pdf", best)
ggsave("output/murders_vs_population.pdf",
best, height = 4, width = 6)
ggsave("output/murders_vs_population.pdf",
best, height = 4, width = 6)
ggsave("output/murders_vs_population.png",
best, height = 4, width = 6)
?load
setwd("C:\git\491\course-materials\lecture-slides\12-Spatial")
setwd("../12-Spatial")
dir("data")
dir("data/california_counties")
counties = st_read("data/california_counties/CaliforniaCounties.shp")
library(sf)
library(tidyverse)
library(tmap)
counties = st_read("data/california_counties/CaliforniaCounties.shp")
View(counties)
plot(counties["POP12_SQMI"])
plot(counties["MED_AGE"])
plot(counties |> slice_head(1))
plot(counties |> slice_head(n=1))
plot(counties[, 1])
plot(counties[1, ])
plot(counties[1, 1])
plot(counties$geometry[1])
plot(counties$geometry[2])
plot(counties$geometry[5])
plot(counties$geometry[12])
plot(counties$geometry[24])
plot(counties$geometry[5])
plot(counties$geometry)
counties$geometry[1]
counties$geometry[1][1]
counties$geometry[1][1][1]
z= counties$geometry[1]
z[1]
z[[1]]
counties$geometry[1][[1]]
counties$geometry[1]
counties$geometry[1][[1]]
counties$geometry[1][[1]][1]
counties$geometry[1][[1]]
qtm(counties)
qtm(counties)
tmap_mode("view")
qtm(counties)
counties = st_read("data/california_counties/CaliforniaCounties.shp") |>
st_make_valid()
qtm(counties)
View(counties[1:3])
counties_df = st_drop_geometry(counties)
View(counties_df)
alameda = counties |> filter(NAME == "Alameda")
tm_shape(counties) + tm_polygons() +
tm_shape(alameda) + tm_borders(col = "green", lwd = 3)
ggplot(counties)
ggplot(counties) + geom_polygon()
ggplot(counties) + geom_path()
tm_shape(counties) + tm_polygons() +
tm_shape(alameda) + tm_borders(col = "green", lwd = 3)
tm_shape(counties) + tm_polygons(alpha = 0.9) +
tm_shape(alameda) + tm_borders(col = "green", lwd = 3)
tm_shape(counties) + tm_polygons(alpha = 0.1) +
tm_shape(alameda) + tm_borders(col = "green", lwd = 3)
map_alameda = tm_shape(counties) + tm_polygons(alpha = 0.1) +
tm_shape(alameda) + tm_borders(col = "green", lwd = 3)
?tmap_save
tmap_save(map_alameda, "output/map_alameda.png")
tmap_save(map_alameda, "output/map_alameda.html")
?st_write
st_write(alameda, "output/alameda.shp")
st_write(alameda, "output/alameda.shp", delete_dsn = T)
tm_shape(counties) + tm_polygons(col = MED_AGE)
tm_shape(counties) + tm_polygons(col = "MED_AGE")
tm_shape(counties) + tm_fill(col = "MED_AGE")
states = st_read("data/us_states_contiguous/stats_contiguous.shp")
states = st_read("data/us_states_contiguous/states_contiguous.shp")
tm_shape(counties) + tm_polygons() + tm_shape(states) + tm_polygons()
plot(counties$geometry)
plot(states$geometry, border = "red", add = T)
plot(counties$geometry)
plot(states$geometry, border = "red", lwd = 5, add = T)
st_bbox(counties)
st_bbox(states)
st_crs(states)
str(states)
class(sates)
class(states)
st_crs(counties)
states |> st_transform(crs = 3857) |> qtm()
states |> st_transform(crs = 2163) |> qtm()
states |> st_transform(crs = 9311) |> qtm()
tmap_mode("plot")
states |> st_transform(crs = 3857) |> qtm()
states |> st_transform(crs = 9311) |> qtm()
states |> st_transform(crs = 2955) |> qtm()
plot(states$geometry)
plot(states$geometry, asp = 1)
counties_geog = st_transform(counties, crs = st_crs(states))
stopifnot(st_crs(states) == st_crs(counties_geog))
tm_shape(states) + tm_polygons() +
tm_shapes(counties_geog) + tm_polygons(col = "darkgreen")
tm_shape(states) + tm_polygons() +
tm_shape(counties_geog) + tm_polygons(col = "darkgreen")
st_area(alameda)
st_area(alameda)/1000^2
library(units)
set_units(st_area(alameda), km^2)
st_area(alameda) |> set_units(km^2)
areas = st_area(counties) |> set_units(km^2)
counties2 = counties |> cbind(areas)
counties2$area_wgs84 = st_area(st_transform(counties, 4326)) |> set_units(km^2)
counties2$area_web = st_area(st_transform(counties, 3857)) |> set_units(km^2)
View(counties2)
stations = st_read("data/bart_stations_2019.geojson")
View(stations)
oak = stations |> filter(station_na == "Oakland Airport")
st_distance(oak, stations)
st_distance(stations, oak)
?st_filter
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")
stopifnot(st_crs(protected) == st_crs(alameda))
tm_shape(alameda) + tm_polygons() +
tm_shape(protected) + tm_polygons(col = "green")
tmap_mode("view")
tm_shape(alameda) + tm_polygons() +
tm_shape(protected) + tm_polygons(col = "green")
protected = st_filter(protected, alameda)
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")
protected_intersects = st_filter(protected, alameda)
tm_shape(alameda) + tm_polygons() +
tm_shape(protected_intersects) + tm_polygons(col = "green")
View(counties)
tm_shape(counties) + tm_polygons(col = "MED_AGE") +
tm_shape(counties) + tm_polygons(col = "POP12_SQMI")
protected_within = st_filter(protected, alameda, .predicate = st_within)
tm_shape(alameda) + tm_polygons() +
tm_shape(protected_within) + tm_polygons(col = "blue")
stations_alameda = stations |>
st_filter(alameda)
stations_alameda = stations |>
st_transform(st_crs(alameda)) |>
st_filter(alameda)
tm_shape(alameda) + tm_polygons() +
tm_shape(stations_alameda) + tm_dots(col = "purple", size = 0.2)
tm_shape(alameda) + tm_polygons() +
tm_shape(stations_alameda) + tm_dots(col = "purple")
